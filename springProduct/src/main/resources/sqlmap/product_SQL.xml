<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일은 여러개일 수 있으므로 
	이를 구별하기 위한 식별 용도로 사용 -->
<mapper namespace="product">

	<insert id="insert" parameterType="productVO">
	<!-- BEFORE : insert 문을 실행하기 전에 수행
		AFTER : insert 문을 실행한 후에 수행
	 -->
		<selectKey order="BEFORE" keyProperty="productId" resultType="String">
			SELECT  SUBSTR (MAX(PRODUCT_ID),0,1)
		        || TRIM((SUBSTR (MAX(PRODUCT_ID),2) +1)) PRODUCT_ID
			FROM PRODUCT
		</selectKey>
		<!-- order로 selectKey의 실행 타이밍 선택 propery로 반환값을 담을 수 있음-->
			INSERT
			    INTO product (
			        product_id,
			        pname,
			        unit_price,
			        description,
			        manufacturer,
			        category,
			        units_in_stock,
			        condition,
			        filename
<!-- 			        quantity -->
			    )
				VALUES (
			        #{productId}
			       , #{pname}
			       , #{unitPrice}
			       , #{description}
			       , #{manufacturer}
			       , #{category}
			       , #{unitsInStock}
			       , #{condition}
			       , #{fileName})
<!-- 			       , #{quantity}) -->
	</insert>
	
	<!-- 상품 목록 -->
	    <select id="list" parameterType="String" resultType="productVO">
	       SELECT P.PRODUCT_ID, P.PNAME, P.UNIT_PRICE, P.DESCRIPTION, P.MANUFACTURER
	         , P.CATEGORY, P.UNITS_IN_STOCK, P.CONDITION, (SELECT A.ATTACH_NAME FROM ATTACH A
	              WHERE  P.PRODUCT_ID = A.TID
	              AND    A.SEQ = 1) FILENAME
	      FROM PRODUCT P
	      WHERE 1= 1
	   <if test="keyWord!=null and keyWord!=''">
	      AND (P.PNAME LIKE '%' || #{keyWord} || '%'
	      OR P.CATEGORY LIKE '%' || #{keyWord} || '%')
	   </if>
	      ORDER BY P.PRODUCT_ID DESC
	    </select>
	
	<!-- 상품 상세 -->
	<select id="select_detail" parameterType="productVO" resultType="productVO">
		SELECT 
		    P.PRODUCT_ID, 
		    P.PNAME, 
		    P.UNIT_PRICE, 
		    P.DESCRIPTION, 
		    P.MANUFACTURER, 
		    P.CATEGORY, 
		    P.UNITS_IN_STOCK, 
		    P.CONDITION, 
		    (SELECT A.ATTACH_NAME FROM ATTACH A
			        WHERE P.PRODUCT_ID = A.TID
			        AND A.SEQ = 1) FILENAME
		FROM PRODUCT P
		WHERE P.PRODUCT_ID = #{productId}
	</select>
	
	<update id="update" parameterType="productVO">
		UPDATE PRODUCT
		SET PNAME=#{pname}, UNIT_PRICE=#{unitPrice}, DESCRIPTION=#{description}, MANUFACTURER=#{manufacturer}, CATEGORY=#{category}, UNITS_IN_STOCK=#{unitsInStock}, CONDITION=#{condition}, FILENAME=#{fileName}
		WHERE PRODUCT_ID = #{productId}
	</update>
	
	<delete id="delete" parameterType="String">
		DELETE FROM PRODUCT
		WHERE PRODUCT_ID = #{productId}
	</delete>
	
	<!-- CART테이블에 insert 
	들어오는 것 : CartVO
	나가는 것 : 생략(insert/update/delete는 resultType="int"를 생략)
	-->
	<insert id="insertCart" parameterType="cartVO">
		INSERT INTO CART(CART_ID, NAME, SHIPPING_DATE, COUNTRY, ZIP_CODE, ADDRESS_NAME, ADDRESS_DETAIL, REGIST_DT)
		VALUES(#{cartId}, #{name}, #{shippingDate}, #{country}, #{zipCode}, #{addressName}, #{addressDetail}, sysdate)
	</insert>
	
	<!-- ATTACH 테이블에 insert
	들어오는 것 : List<AttachVO>
	나가는 것 : 생략
	 -->
	 <update id="insertAttach" parameterType="java.util.List">
	 	<foreach collection="list" item="attachVO" open="INSERT ALL "
	 		close="SELECT * FROM SYS.DUAL" separator=" ">
	 		INTO ATTACH VALUES(#{attachVO.seq},#{attachVO.tid},#{attachVO.attachName}
	 			,#{attachVO.attachSize},#{attachVO.attachType},sysdate)
	 	</foreach>
	 </update>
	 
	 <!-- PRODUCT테이블의 기본키 자동 생성 -->
	<select id="getProductId" resultType="String">
		SELECT  SUBSTR (MAX(PRODUCT_ID),0,1)
		        || TRIM((SUBSTR (MAX(PRODUCT_ID),2) +1)) PRODUCT_ID
		FROM PRODUCT
	</select>
</mapper>

